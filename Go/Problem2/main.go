package main

import (
	"fmt"
)

/*
	Problem 2: Even Fibonacci numbers.
	Each new term in the Fibonacci sequence is generated by adding
	the previous two terms. By starting with 1 and 2, the first 10 terms will be:

	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

	By considering the terms in the Fibonacci sequence whose values do not
	exceed four million, find the sum of the even-valued terms.
*/
func main() {
	const fourMil = 4000000
	seq := getFibTermsFilter(fourMil, isEven)
	sum := 0
	for n := range seq {
		sum += n
	}

	fmt.Printf("total of even Fibonnaci numbers up to %d: %d\n", fourMil, sum)
}

func isEven(x int) bool {
	return x%2 == 0
}

// getFibTermsFilter acts as a wrapper around getFibTerms; it returns a channel that can be used
// to receive successive terms in the fibonacci sequence, up to the specified limit.
// The terms returned to the caller are filtered to the list that match the specified filter function.
func getFibTermsFilter(limit int, filterFunc func(x int) bool) <-chan int {
	seq := getFibTerms(limit)
	res := make(chan int)

	go func() {
		for n := range seq {
			if filterFunc(n) {
				res <- n
			}
		}
		close(res)
	}()

	return res
}

// getFibTerms returns a channel that can be used
// to receive successive terms in the fibonacci sequence, up to the specified limit.
func getFibTerms(limit int) <-chan int {
	res := make(chan int)

	go func() {
		// Generate a fibonacci sequence iteratively by recording n-1 and n-2
		// in memory and updating the terms as we send them out.
		nMinus2 := 0
		nMinus1 := 0
		for n := 1; n < limit; n = nMinus1 + nMinus2 {
			res <- n

			nMinus2 = nMinus1
			nMinus1 = n
		}

		close(res)
	}()

	return res
}
